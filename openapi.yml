---
openapi: 3.0.1
info:
  title: PlaceOS Rest-API
  version: 1.30.2
paths:
  /api/engine/v2:
    get:
      summary: Healthcheck
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      security:
      - bearerAuth: []
  /api/engine/v2/api_keys:
    get:
      summary: get all api keys
      parameters:
      - name: authority_id
        in: query
        description: Filter by authority_id
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiKey'
      security:
      - bearerAuth: []
    post:
      summary: Create an api key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKey'
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
      security:
      - bearerAuth: []
  /api/engine/v2/api_keys/inspect:
    get:
      summary: Get the user token
      responses:
        "200":
          description: OK
          content:
            text/yaml:
              schema: {}
      security:
      - bearerAuth: []
  /api/engine/v2/api_keys/{id}:
    get:
      summary: get current api key
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiKey'
      security:
      - bearerAuth: []
    put:
      summary: Update an api key
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKey'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
      security:
      - bearerAuth: []
    delete:
      summary: Delete an api key
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
    patch:
      summary: Update an api key
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKey'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
      security:
      - bearerAuth: []
  /api/engine/v2/backfill:
    post:
      summary: Backfill RubberSoul
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      security:
      - bearerAuth: []
  /api/engine/v2/brokers:
    get:
      summary: get all brokers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Broker'
      security:
      - bearerAuth: []
    post:
      summary: Create a broker
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Broker'
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Broker'
      security:
      - bearerAuth: []
  /api/engine/v2/brokers/{id}:
    get:
      summary: get current broker
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Broker'
      security:
      - bearerAuth: []
    put:
      summary: Update a trigger
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Broker'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Broker'
      security:
      - bearerAuth: []
    delete:
      summary: Delete a broker
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
    patch:
      summary: Update a broker
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Broker'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Broker'
      security:
      - bearerAuth: []
  /api/engine/v2/cluster:
    get:
      summary: get all cluster details
      parameters:
      - name: include_status
        in: query
        description: return extended information in details
        required: false
        schema:
          type: boolean
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
  /api/engine/v2/cluster/versions:
    get:
      summary: Version of loaded services
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
  /api/engine/v2/cluster/{id}:
    get:
      summary: Get a cluster
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      - name: include_status
        in: query
        description: return extended information in details
        required: false
        schema:
          type: boolean
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
    delete:
      summary: Delete a cluster
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      - name: driver
        in: query
        description: terminate this driver
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
  /api/engine/v2/domains:
    get:
      summary: get all domains
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Domain'
      security:
      - bearerAuth: []
    post:
      summary: Create a domain
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Domain'
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
      security:
      - bearerAuth: []
  /api/engine/v2/domains/{id}:
    get:
      summary: get current domain
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
      security:
      - bearerAuth: []
    put:
      summary: Update a domain
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Domain'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
      security:
      - bearerAuth: []
    delete:
      summary: Delete a domain
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
    patch:
      summary: Update a domain
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Domain'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
      security:
      - bearerAuth: []
  /api/engine/v2/drivers:
    get:
      summary: get drivers
      parameters:
      - name: role
        in: query
        description: filter by role
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/yaml:
              schema: {}
      security:
      - bearerAuth: []
    post:
      summary: Create a driver
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Open_Driver'
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Open_Driver'
      security:
      - bearerAuth: []
  /api/engine/v2/drivers/{id}:
    get:
      summary: get current driver
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      - name: compilation_status
        in: query
        description: include compilation status in render
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/yaml:
              schema: {}
      security:
      - bearerAuth: []
    put:
      summary: Update a driver
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Open_Driver'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Open_Driver'
      security:
      - bearerAuth: []
    delete:
      summary: Delete a driver
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
    patch:
      summary: Update a driver
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Open_Driver'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Open_Driver'
      security:
      - bearerAuth: []
  /api/engine/v2/drivers/{id}/compiled:
    get:
      summary: Check if the core responsible for the driver has finished compilation
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
          content:
            text/yaml:
              schema: {}
      security:
      - bearerAuth: []
  /api/engine/v2/drivers/{id}/recompile:
    post:
      summary: Attempt to recompile driver with given ID
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
          content:
            text/yaml:
              schema: {}
        "404":
          description: Not Found
        "408":
          description: Request Timeout
        "208":
          description: Already Reported
      security:
      - bearerAuth: []
  /api/engine/v2/edges:
    get:
      summary: get all edges
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Edge'
      security:
      - bearerAuth: []
    post:
      summary: Create an edge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Edge'
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Edge'
      security:
      - bearerAuth: []
  /api/engine/v2/edges/control:
    get:
      summary: Validate the present of the id and check the secret before routing
        to core
      parameters:
      - name: token
        in: query
        description: authenticated token
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      security:
      - bearerAuth: []
  /api/engine/v2/edges/{id}:
    get:
      summary: get current edge
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Edge'
      security:
      - bearerAuth: []
    put:
      summary: Update an edge
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Edge'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Edge'
      security:
      - bearerAuth: []
    delete:
      summary: Delete an edge
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
    patch:
      summary: Update an edge
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Edge'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Edge'
      security:
      - bearerAuth: []
  /api/engine/v2/edges/{id}/token:
    get:
      summary: Get the token associated with the given id
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
          content:
            text/yaml:
              schema: {}
        "403":
          description: Forbidden
      security:
      - bearerAuth: []
  /api/engine/v2/ldap_auths:
    get:
      summary: get all Ldap auths
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Auth'
      security:
      - bearerAuth: []
    post:
      summary: Create a new Ldap auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
      security:
      - bearerAuth: []
  /api/engine/v2/ldap_auths/{id}:
    get:
      summary: get current Ldap auths
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
      security:
      - bearerAuth: []
    put:
      summary: Update the current auth
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
      security:
      - bearerAuth: []
    delete:
      summary: Delete a the current auth
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
    patch:
      summary: Update the current auth
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
      security:
      - bearerAuth: []
  /api/engine/v2/metadata/{id}:
    get:
      summary: Fetch metadata for a model
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      - name: id
        in: query
        description: Parent ID of metadata
        required: false
        schema:
          type: string
      - name: name
        in: query
        description: filter by name
        required: false
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenApiMetadata'
      security:
      - bearerAuth: []
    put:
      summary: Update metadata
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenApiMetadata'
        required: true
      responses:
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenApiMetadata'
      security:
      - bearerAuth: []
    delete:
      summary: Delete metadata
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      - name: id
        in: query
        description: Parent ID of metadata
        required: false
        schema:
          type: string
      - name: name
        in: query
        description: filter by name
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      security:
      - bearerAuth: []
    patch:
      summary: Update metadata
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenApiMetadata'
        required: true
      responses:
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenApiMetadata'
      security:
      - bearerAuth: []
  /api/engine/v2/metadata/{id}/children:
    get:
      summary: Fetch metadata for Zone children
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      - name: include_parent
        in: query
        description: Includes the parent metadata by default via `include_parent`
          param
        required: false
        schema:
          type: boolean
      - name: name
        in: query
        description: filter by name
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OpenApiMetadata'
        "403":
          description: Forbidden
      security:
      - bearerAuth: []
  /api/engine/v2/modules:
    get:
      summary: Get modules
      parameters:
      - name: as_of
        in: query
        description: filter by as_of
        required: false
        schema:
          type: integer
      - name: control_system_id
        in: query
        description: query the database directly if present
        required: false
        schema:
          type: string
      - name: connected
        in: query
        description: filter by connected
        required: false
        schema:
          type: boolean
      - name: driver_id
        in: query
        description: filter by driver_id
        required: false
        schema:
          type: string
      - name: no_logic
        in: query
        description: filter by no_logic
        required: false
        schema:
          type: boolean
      - name: running
        in: query
        description: filter by running
        required: false
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Module'
      security:
      - bearerAuth: []
    post:
      summary: Create a module
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Module'
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Module'
      security:
      - bearerAuth: []
  /api/engine/v2/modules/{id}:
    get:
      summary: Get module
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      - name: complete
        in: query
        description: return module with all possible fields
        required: false
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Module'
      security:
      - bearerAuth: []
    put:
      summary: Update a module
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Module'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Module'
      security:
      - bearerAuth: []
    delete:
      summary: Delete a module
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
    patch:
      summary: Update a module
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Module'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Module'
      security:
      - bearerAuth: []
  /api/engine/v2/modules/{id}/exec/{method}:
    post:
      summary: Executes a command on a module
      parameters:
      - name: method
        in: path
        required: true
        schema:
          type: string
        example: method
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
          content:
            text/yaml:
              schema: {}
        "500":
          description: Internal Server Error
      security:
      - bearerAuth: []
  /api/engine/v2/modules/{id}/load:
    post:
      summary: Loads system at provided ID
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
          content:
            text/yaml:
              schema: {}
      security:
      - bearerAuth: []
  /api/engine/v2/modules/{id}/ping:
    post:
      summary: Pings module at provided ID
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "406":
          description: Not Acceptable
        "200":
          description: OK
          content:
            text/yaml:
              schema: {}
      security:
      - bearerAuth: []
  /api/engine/v2/modules/{id}/settings:
    get:
      summary: Receive the collated settings for a module
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Open_Settings'
      security:
      - bearerAuth: []
  /api/engine/v2/modules/{id}/start:
    post:
      summary: Starts a module
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      security:
      - bearerAuth: []
  /api/engine/v2/modules/{id}/state:
    get:
      summary: Dumps the complete status state of the module
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
          content:
            text/yaml:
              schema: {}
      security:
      - bearerAuth: []
  /api/engine/v2/modules/{id}/state/{key}:
    get:
      summary: Returns the value of the requested status variable
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
        example: key
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
          content:
            text/yaml:
              schema: {}
      security:
      - bearerAuth: []
  /api/engine/v2/modules/{id}/stop:
    post:
      summary: Stops a module
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      security:
      - bearerAuth: []
  /api/engine/v2/oauth_apps:
    get:
      summary: get all applications
      parameters:
      - name: authority
        in: query
        description: filter by owner id
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DoorkeeperApplication'
      security:
      - bearerAuth: []
    post:
      summary: Create an application
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DoorkeeperApplication'
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DoorkeeperApplication'
      security:
      - bearerAuth: []
  /api/engine/v2/oauth_apps/{id}:
    get:
      summary: get current application
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DoorkeeperApplication'
      security:
      - bearerAuth: []
    put:
      summary: Update an application
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DoorkeeperApplication'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DoorkeeperApplication'
      security:
      - bearerAuth: []
    delete:
      summary: Delete an application
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
    patch:
      summary: Update an application
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DoorkeeperApplication'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DoorkeeperApplication'
      security:
      - bearerAuth: []
  /api/engine/v2/oauth_auths:
    get:
      summary: get all OAuth auths
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Auth'
      security:
      - bearerAuth: []
    post:
      summary: Create a new OAuth auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
      security:
      - bearerAuth: []
  /api/engine/v2/oauth_auths/{id}:
    get:
      summary: get current OAuth auths
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
      security:
      - bearerAuth: []
    put:
      summary: Update the current auth
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
      security:
      - bearerAuth: []
    delete:
      summary: Delete a the current auth
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
    patch:
      summary: Update the current auth
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
      security:
      - bearerAuth: []
  /api/engine/v2/reindex:
    post:
      summary: Reindex RubberSoul
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      security:
      - bearerAuth: []
  /api/engine/v2/repositories:
    get:
      summary: get all repositories
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Repository'
      security:
      - bearerAuth: []
    post:
      summary: Create a repository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Repository'
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
      security:
      - bearerAuth: []
  /api/engine/v2/repositories/interfaces:
    get:
      summary: Returns a hash of folder_name to commit
      responses:
        "200":
          description: OK
          content:
            text/yaml:
              schema: {}
      security:
      - bearerAuth: []
  /api/engine/v2/repositories/{id}:
    get:
      summary: get current repository
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
      security:
      - bearerAuth: []
    put:
      summary: Update a repository
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Repository'
        required: true
      responses:
        "422":
          description: Unprocessable Entity
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
      security:
      - bearerAuth: []
    delete:
      summary: Delete a repository
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
    patch:
      summary: Update a repository
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Repository'
        required: true
      responses:
        "422":
          description: Unprocessable Entity
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
      security:
      - bearerAuth: []
  /api/engine/v2/repositories/{id}/branches:
    get:
      summary: Returns the branches of a repository specified by the given id
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
          content:
            text/yaml:
              schema: {}
      security:
      - bearerAuth: []
  /api/engine/v2/repositories/{id}/commits:
    get:
      summary: Returns a commits in repository specified by the given id
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      - name: limit
        in: query
        description: The maximum numbers of commits to return
        required: false
        schema:
          type: integer
      - name: driver
        in: query
        description: file_name of driver
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/yaml:
              schema: {}
      security:
      - bearerAuth: []
  /api/engine/v2/repositories/{id}/details:
    get:
      summary: Returns a details of a commit of a driver in a repository specified
        by the given id
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      - name: driver
        in: query
        description: Name of driver
        required: false
        schema:
          type: string
      - name: commit
        in: query
        description: Name of commit
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/yaml:
              schema: {}
      security:
      - bearerAuth: []
  /api/engine/v2/repositories/{id}/drivers:
    get:
      summary: Returns drivers in repository specified by the given id
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
          content:
            text/yaml:
              schema: {}
      security:
      - bearerAuth: []
  /api/engine/v2/repositories/{id}/pull:
    post:
      summary: Pull repository at given id
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "408":
          description: Request Timeout
        "200":
          description: OK
          content:
            text/yaml:
              schema: {}
        "404":
          description: Not Found
      security:
      - bearerAuth: []
  /api/engine/v2/saml_auths:
    get:
      summary: get all Saml auths
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Auth'
      security:
      - bearerAuth: []
    post:
      summary: Create a new Saml auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
      security:
      - bearerAuth: []
  /api/engine/v2/saml_auths/{id}:
    get:
      summary: get current Saml auths
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
      security:
      - bearerAuth: []
    put:
      summary: Update the current auth
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
      security:
      - bearerAuth: []
    delete:
      summary: Delete a the current auth
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
    patch:
      summary: Update the current auth
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
      security:
      - bearerAuth: []
  /api/engine/v2/schema:
    get:
      summary: get all schema
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JsonSchema'
      security:
      - bearerAuth: []
    post:
      summary: Create a schema
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonSchema'
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
      security:
      - bearerAuth: []
  /api/engine/v2/schema/{id}:
    get:
      summary: get current schema
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
      security:
      - bearerAuth: []
    put:
      summary: Update a schema
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonSchema'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
      security:
      - bearerAuth: []
    delete:
      summary: Delete a schema
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
    patch:
      summary: Update a schema
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonSchema'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
      security:
      - bearerAuth: []
  /api/engine/v2/scopes:
    get:
      summary: Avaliable scopes
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
  /api/engine/v2/settings:
    get:
      summary: get all settings
      parameters:
      - name: parent_id
        in: query
        description: filter by parent_id
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Open_Settings'
      security:
      - bearerAuth: []
    post:
      summary: Create a setting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Open_Settings'
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Open_Settings'
      security:
      - bearerAuth: []
  /api/engine/v2/settings/{id}:
    get:
      summary: get current setting
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Open_Settings'
      security:
      - bearerAuth: []
    put:
      summary: Update a setting
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Open_Settings'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Open_Settings'
      security:
      - bearerAuth: []
    delete:
      summary: Delete a setting
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
    patch:
      summary: Update a setting
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Open_Settings'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Open_Settings'
      security:
      - bearerAuth: []
  /api/engine/v2/settings/{id}/history:
    get:
      summary: Get list of instances associated wtih given id of users based on email
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      - name: limit
        in: query
        description: The maximum number of history entries to return
        required: false
        schema:
          type: integer
      - name: offset
        in: query
        description: Set offset
        required: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            text/yaml:
              schema: {}
      security:
      - bearerAuth: []
  /api/engine/v2/signal:
    post:
      summary: Signal on channel?
      parameters:
      - name: channel
        in: query
        description: channel to signal on
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
  /api/engine/v2/systems:
    get:
      summary: Query ControlSystem resources
      parameters:
      - name: bookable
        in: query
        description: filter by bookable
        required: false
        schema:
          type: boolean
      - name: capacity
        in: query
        description: filter by capacity
        required: false
        schema:
          type: integer
      - name: email
        in: query
        description: filter by email
        required: false
        schema:
          type: string
      - name: features
        in: query
        description: filter by features
        required: false
        schema:
          type: string
      - name: module_id
        in: query
        description: filter by module_id
        required: false
        schema:
          type: string
      - name: trigger_id
        in: query
        description: filter by trigger_id
        required: false
        schema:
          type: string
      - name: zone_id
        in: query
        description: filter by zone_id
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ControlSystem'
      security:
      - bearerAuth: []
    post:
      summary: Create a control system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ControlSystem'
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ControlSystem'
      security:
      - bearerAuth: []
  /api/engine/v2/systems/control:
    get:
      summary: Websocket API
      responses:
        "200":
          description: OK
  /api/engine/v2/systems/with_emails:
    get:
      summary: Finds all the systems with the specified email address
      parameters:
      - name: in
        in: query
        description: emails seperated by ,
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ControlSystem'
      security:
      - bearerAuth: []
  /api/engine/v2/systems/{sys_id}:
    get:
      summary: Renders a control system
      parameters:
      - name: sys_id
        in: path
        required: true
        schema:
          type: string
        example: sys_id
      - name: complete
        in: query
        description: render with all fields associated
        required: false
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ControlSystem'
        "403":
          description: Forbidden
      security:
      - bearerAuth: []
    put:
      summary: Update a control system
      parameters:
      - name: sys_id
        in: path
        required: true
        schema:
          type: string
        example: sys_id
      - name: version
        in: query
        description: can only edit current control system
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ControlSystem'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ControlSystem'
      security:
      - bearerAuth: []
    delete:
      summary: Delete the current control system
      parameters:
      - name: sys_id
        in: path
        required: true
        schema:
          type: string
        example: sys_id
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
    patch:
      summary: Update a control system
      parameters:
      - name: sys_id
        in: path
        required: true
        schema:
          type: string
        example: sys_id
      - name: version
        in: query
        description: can only edit current control system
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ControlSystem'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ControlSystem'
      security:
      - bearerAuth: []
  /api/engine/v2/systems/{sys_id}/functions/{module_slug}:
    get:
      summary: Lists functions available on the driver, Filters higher privilege functions
      parameters:
      - name: module_slug
        in: path
        required: true
        schema:
          type: string
        example: module_slug
      - name: sys_id
        in: path
        required: true
        schema:
          type: string
        example: sys_id
      responses:
        "200":
          description: OK
          content:
            text/yaml:
              schema: {}
        "404":
          description: Not Found
      security:
      - bearerAuth: []
  /api/engine/v2/systems/{sys_id}/metadata:
    get:
      summary: Return metadata for the system
      parameters:
      - name: sys_id
        in: path
        required: true
        schema:
          type: string
        example: sys_id
      - name: name
        in: query
        description: ""
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenApiMetadata'
      security:
      - bearerAuth: []
  /api/engine/v2/systems/{sys_id}/module/{module_id}:
    put:
      summary: Adds the module from the system if it doesn't already exist
      parameters:
      - name: module_id
        in: path
        required: true
        schema:
          type: string
        example: module_id
      - name: sys_id
        in: path
        required: true
        schema:
          type: string
        example: sys_id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ControlSystem'
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
      security:
      - bearerAuth: []
    delete:
      summary: Removes the module from the system and deletes it if not used elsewhere
      parameters:
      - name: module_id
        in: path
        required: true
        schema:
          type: string
        example: module_id
      - name: sys_id
        in: path
        required: true
        schema:
          type: string
        example: sys_id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ControlSystem'
      security:
      - bearerAuth: []
  /api/engine/v2/systems/{sys_id}/settings:
    get:
      summary: Receive the collated settings for a system
      parameters:
      - name: sys_id
        in: path
        required: true
        schema:
          type: string
        example: sys_id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Open_Settings'
      security:
      - bearerAuth: []
  /api/engine/v2/systems/{sys_id}/start:
    post:
      summary: Start modules
      parameters:
      - name: sys_id
        in: path
        required: true
        schema:
          type: string
        example: sys_id
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
  /api/engine/v2/systems/{sys_id}/stop:
    post:
      summary: Stop modules
      parameters:
      - name: sys_id
        in: path
        required: true
        schema:
          type: string
        example: sys_id
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
  /api/engine/v2/systems/{sys_id}/triggers:
    get:
      summary: get all trigger instances in system
      parameters:
      - name: sys_id
        in: path
        required: true
        schema:
          type: string
        example: sys_id
      - name: complete
        in: query
        description: The maximum numbers of zones to return
        required: false
        schema:
          type: boolean
      - name: important
        in: query
        description: Filter by importance
        required: false
        schema:
          type: boolean
      - name: triggered
        in: query
        description: Filter by triggered
        required: false
        schema:
          type: boolean
      - name: trigger_id
        in: query
        description: Filter by trigger ID
        required: false
        schema:
          type: string
      - name: as_of
        in: query
        description: occurred before a particular time
        required: false
        schema:
          type: integer
      - name: sys_id
        in: query
        description: Filter by system ID
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TriggerInstance'
      security:
      - bearerAuth: []
    post:
      summary: Create a trigger instance
      parameters:
      - name: sys_id
        in: path
        required: true
        schema:
          type: string
        example: sys_id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerInstance'
        required: true
      responses:
        "422":
          description: Unprocessable Entity
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerInstance'
      security:
      - bearerAuth: []
  /api/engine/v2/systems/{sys_id}/triggers/{sys_id}:
    put:
      summary: Update a trigger instance
      parameters:
      - name: sys_id
        in: path
        required: true
        schema:
          type: string
        example: sys_id
      - name: sys_id
        in: path
        required: true
        schema:
          type: string
        example: sys_id
      - name: enabled
        in: query
        description: ""
        required: false
        schema:
          type: boolean
      - name: important
        in: query
        description: ""
        required: false
        schema:
          type: boolean
      - name: exec_enabled
        in: query
        description: ""
        required: false
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerInstance'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerInstance'
      security:
      - bearerAuth: []
  /api/engine/v2/systems/{sys_id}/triggers/{trig_id}:
    get:
      summary: get current trigger instance in system
      parameters:
      - name: trig_id
        in: path
        required: true
        schema:
          type: string
        example: trig_id
      - name: sys_id
        in: path
        required: true
        schema:
          type: string
        example: sys_id
      - name: complete
        in: query
        description: choose to render extra association fields
        required: false
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerInstance'
      security:
      - bearerAuth: []
    delete:
      summary: Delete a trigger instance
      parameters:
      - name: trig_id
        in: path
        required: true
        schema:
          type: string
        example: trig_id
      - name: sys_id
        in: path
        required: true
        schema:
          type: string
        example: sys_id
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
    patch:
      summary: Update a trigger instance
      parameters:
      - name: trig_id
        in: path
        required: true
        schema:
          type: string
        example: trig_id
      - name: sys_id
        in: path
        required: true
        schema:
          type: string
        example: sys_id
      - name: enabled
        in: query
        description: ""
        required: false
        schema:
          type: boolean
      - name: important
        in: query
        description: ""
        required: false
        schema:
          type: boolean
      - name: exec_enabled
        in: query
        description: ""
        required: false
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerInstance'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerInstance'
      security:
      - bearerAuth: []
  /api/engine/v2/systems/{sys_id}/types:
    get:
      summary: Look-up a module types in a system, returning a count of each type
      parameters:
      - name: sys_id
        in: path
        required: true
        schema:
          type: string
        example: sys_id
      responses:
        "200":
          description: OK
          content:
            text/yaml:
              schema: {}
      security:
      - bearerAuth: []
  /api/engine/v2/systems/{sys_id}/zones:
    get:
      summary: Return all zones for this system
      parameters:
      - name: sys_id
        in: path
        required: true
        schema:
          type: string
        example: sys_id
      - name: sys_id
        in: query
        description: Can only get info on systems the user has access to
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Zone'
        "403":
          description: Forbidden
      security:
      - bearerAuth: []
  /api/engine/v2/systems/{sys_id}/{module_slug}:
    get:
      summary: Returns the state of an associated module
      parameters:
      - name: module_slug
        in: path
        required: true
        schema:
          type: string
        example: module_slug
      - name: sys_id
        in: path
        required: true
        schema:
          type: string
        example: sys_id
      responses:
        "200":
          description: OK
          content:
            text/yaml:
              schema: {}
      security:
      - bearerAuth: []
  /api/engine/v2/systems/{sys_id}/{module_slug}/{key}:
    get:
      summary: Returns the state lookup for a given key on a module
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
        example: key
      - name: module_slug
        in: path
        required: true
        schema:
          type: string
        example: module_slug
      - name: sys_id
        in: path
        required: true
        schema:
          type: string
        example: sys_id
      responses:
        "200":
          description: OK
          content:
            text/yaml:
              schema: {}
      security:
      - bearerAuth: []
  /api/engine/v2/systems/{sys_id}/{module_slug}/{method}:
    post:
      summary: Runs a function in a system module
      parameters:
      - name: method
        in: path
        required: true
        schema:
          type: string
        example: method
      - name: module_slug
        in: path
        required: true
        schema:
          type: string
        example: module_slug
      - name: sys_id
        in: path
        required: true
        schema:
          type: string
        example: sys_id
      responses:
        "200":
          description: OK
          content:
            text/yaml:
              schema: {}
        "500":
          description: Internal Server Error
      security:
      - bearerAuth: []
  /api/engine/v2/triggers:
    get:
      summary: get all triggers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trigger'
      security:
      - bearerAuth: []
    post:
      summary: Create a trigger
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trigger'
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trigger'
      security:
      - bearerAuth: []
  /api/engine/v2/triggers/{id}:
    get:
      summary: get a trigger
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      - name: instances
        in: query
        description: should instances be returned
        required: false
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trigger'
      security:
      - bearerAuth: []
    put:
      summary: Update a trigger
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trigger'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trigger'
      security:
      - bearerAuth: []
    delete:
      summary: Delete a trigger
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
    patch:
      summary: Update a trigger
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trigger'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trigger'
      security:
      - bearerAuth: []
  /api/engine/v2/triggers/{id}/instances:
    get:
      summary: Get list of instances associated wtih given id of users based on email
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
          content:
            text/yaml:
              schema: {}
      security:
      - bearerAuth: []
  /api/engine/v2/users:
    get:
      summary: get all users
      parameters:
      - name: authority_id
        in: query
        description: '....'
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
      - bearerAuth: []
    post:
      summary: Create a zone
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
      - bearerAuth: []
  /api/engine/v2/users/current:
    get:
      summary: Render the current user
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      security:
      - bearerAuth: []
  /api/engine/v2/users/groups:
    get:
      summary: Get list of groups of users based on email
      parameters:
      - name: emails
        in: query
        description: ' comma-seperated list of emails'
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
  /api/engine/v2/users/{id}:
    get:
      summary: get users
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      - name: authority_id
        in: query
        description: '....'
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
    put:
      summary: Update a user
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
      - bearerAuth: []
    delete:
      summary: Delete a user
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
    patch:
      summary: Update a user
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
      - bearerAuth: []
  /api/engine/v2/users/{id}/metadata:
    get:
      summary: Get the metadata of a user
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      - name: name
        in: query
        description: The name of the metadata
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenApiMetadata'
      security:
      - bearerAuth: []
  /api/engine/v2/version:
    get:
      summary: Version of application
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
  /api/engine/v2/webhook/{id}:
    get:
      summary: get a webhook trigger
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      - name: instances
        in: query
        description: should instances be returned
        required: false
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trigger'
      security:
      - bearerAuth: []
  /api/engine/v2/webhook/{id}/notify:
    get:
      summary: notify a trigger, get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
    put:
      summary: notify a trigger, put
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
    post:
      summary: notify a trigger, post
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
    delete:
      summary: notify a trigger, delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
    options:
      summary: notify a trigger, options
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
    patch:
      summary: notify a trigger, patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
  /api/engine/v2/zones:
    get:
      summary: get all zones
      parameters:
      - name: limit
        in: query
        description: The maximum numbers of zones to return
        required: false
        schema:
          type: integer
      - name: parent
        in: query
        description: Limit results to the children of this parent zone
        required: false
        schema:
          type: string
      - name: tags
        in: query
        description: return zones with the specified tags
        required: false
        schema:
          type: string
      - name: q
        in: query
        description: Search query term
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Zone'
        "400":
          description: Bad Request
        "403":
          description: Forbidden
      security:
      - bearerAuth: []
    post:
      summary: Create a zone
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Zone'
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
      security:
      - bearerAuth: []
  /api/engine/v2/zones/{id}:
    get:
      summary: get a zone
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      - name: complete
        in: query
        description: Include trigger data in response
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
      security:
      - bearerAuth: []
    put:
      summary: Update a zone
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Zone'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
      security:
      - bearerAuth: []
    delete:
      summary: Delete a zone
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
    patch:
      summary: Update a zone
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Zone'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
      security:
      - bearerAuth: []
  /api/engine/v2/zones/{id}/exec/{module_slug}/{method}:
    post:
      summary: Execute a method on a module across all systems in a Zone
      parameters:
      - name: method
        in: path
        required: true
        schema:
          type: string
        example: method
      - name: module_slug
        in: path
        required: true
        schema:
          type: string
        example: module_slug
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
          content:
            text/yaml:
              schema: {}
      security:
      - bearerAuth: []
  /api/engine/v2/zones/{id}/metadata:
    get:
      summary: Get the metadata of a zone
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      - name: name
        in: query
        description: The name of the metadata
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenApiMetadata'
      security:
      - bearerAuth: []
  /api/engine/v2/zones/{id}/triggers:
    get:
      summary: get the triggers attached to current zone
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        example: id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trigger'
      security:
      - bearerAuth: []
components:
  schemas:
    Zone:
      required:
      - name
      - description
      type: object
      properties:
        name:
          type: string
          example: Zone 3986
        description:
          type: string
          example: This zone has space for 517 people
    OpenApiMetadata:
      required:
      - name
      - description
      - details
      type: object
      properties:
        name:
          type: string
          example: Orange Metadata
        description:
          type: string
          example: Includes size of orange & more...
        details:
          type: object
          additionalProperties: true
    User:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: Robert
    Repository:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: Robert
    ApiKey:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: Robert
    DoorkeeperApplication:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: Robert
    JsonSchema:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: Robert
    Module:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: Robert
    ControlSystem:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: Robert
    TriggerInstance:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: Robert
    Open_Settings:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: Robert
    Auth:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: Robert
    Edge:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: Robert
    Open_Driver:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: Robert
    Domain:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: Robert
    Broker:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: Robert
    Trigger:
      required:
      - name
      - description
      type: object
      properties:
        name:
          type: string
          example: Trigger 2678
        description:
          type: string
          example: Trigger for zone 34
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
