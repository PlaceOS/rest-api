version: "3.7"

# YAML Anchors

x-deployment-env: &deployment-env
  ENV: ${ENV:-development}
  SG_ENV: ${SG_ENV:-development}

x-elastic-client-env: &elastic-client-env
  ELASTIC_HOST: ${ELASTIC_HOST:-elastic}
  ELASTIC_PORT: ${ELASTIC_PORT:-9200}

x-redis-client-env: &redis-client-env
  REDIS_URL: ${REDIS_URL:-redis://redis:6379}

x-postgresdb-client-env: &postgresdb-client-env
  PG_HOST: ${PG_HOST:-postgres}
  PG_PORT: ${PG_PORT:-5432}
  PG_DB: ${PG_DB:-place_development}
  PG_USER: ${PG_USER:-postgres}
  PG_PASSWORD: ${PG_PASSWORD:-password}
  PG_DATABASE: ${PG_DATABASE:-place_development}
  PG_DATABASE_URL: ${PG_DATABASE_URL:-postgresql://postgres:password@postgres:5432/place_development}

x-search-ingest-client-env: &search-ingest-client-env
  SEARCH_INGEST_URI: ${SEARCH_INGEST_URI:-http://search-ingest:3000}

x-s3-client-env: &s3-client-env
  AWS_REGION: ${AWS_REGION:-"us-east-1"}
  AWS_KEY: ${AWS_KEY:-"root"}
  AWS_SECRET: ${AWS_SECRET:-"password"}
  AWS_S3_ENDPOINT: ${AWS_S3_ENDPOINT:-"http://minio:9000"}
  AWS_S3_BUCKET: ${AWS_S3_BUCKET:-"placeos-drivers-build-service"}

x-build-api-env: &build-api-env
  BUILD_API_HOST: ${BUILD_API_HOST:-build_service}
  BUILD_API_PORT: ${BUILD_API_PORT:-3000}


services:
  test: # Rest API
    image: placeos/service-spec-runner:${CRYSTAL_VERSION:-latest}
    volumes:
      - ${PWD}/spec:/app/spec
      - ${PWD}/src:/app/src
      - ${PWD}/lib:/app/lib
      - ${PWD}/shard.lock:/app/shard.lock
      - ${PWD}/shard.override.yml:/app/shard.override.yml
      - ${PWD}/shard.yml:/app/shard.yml.input
      - ${PWD}/coverage:/app/coverage
    depends_on:
      - auth
      - core
      - elastic
      - redis
      - postgres
      - migrator
      - search-ingest
    security_opt:
      - seccomp:unconfined
    environment:
      # Environment
      GITHUB_ACTION: ${GITHUB_ACTION:-}
      <<: [
        *deployment-env,
        # Service Hosts
        *elastic-client-env,
        *redis-client-env,
        *postgresdb-client-env,
      ]
      # LOG_LEVEL: debug

  elastic:
    image: elasticsearch:${ELASTIC_VERSION:-7.17.6}
    restart: always
    hostname: elastic
    healthcheck:
      test: wget -q --no-verbose --tries=1 --spider http://localhost:9200/_cat/health
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms1g -Xmx1g
      http.cors.enabled: "true"
      http.cors.allow-origin: http://localhost:8080
    ports:
      - 9200:9200

  redis:
    image: eqalpha/keydb
    restart: always
    hostname: redis
    healthcheck:
      test: redis-cli ping
    ports:
      - 6379:6379

  postgres:
    hostname: postgres
    image: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 30s
      retries: 3
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: place_development
    ports:
      - 5432:5432
  migrator:
    build:
      context: ${PWD}/spec/migration
    container_name: migrator
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      GITHUB_ACTION: ${GITHUB_ACTION:-}
      PG_DATABASE_URL: ${PG_DATABASE_URL:-postgresql://postgres:password@postgres:5432/place_development}


  search-ingest: # PostgreSQL to Elasticsearch Service
    image: placeos/search-ingest:nightly
    restart: always
    hostname: search-ingest
    depends_on:
      - elastic
      - migrator
      - postgres
    environment:
      LOG_LEVEL: trace
      # Service Hosts
      <<: [
        *postgresdb-client-env,
        *elastic-client-env,
        # Environment
        *deployment-env,
      ]

  auth: # Authentication Service
    image: placeos/auth:nightly
    restart: always
    hostname: auth
    depends_on:
      - redis
      - migrator
      - postgres
    environment:
      <<: [
        *postgresdb-client-env,
        *redis-client-env,
      ]
      COAUTH_NO_SSL: "true"
      PLACE_URI: https://${PLACE_DOMAIN:-localhost:8443}

  core: # Module coordinator
    image: placeos/core:nightly
    restart: always
    hostname: core
    depends_on:
      - redis
      - migrator
      - postgres
      - build_service
    ulimits:
      nofile: 40000
      core:
        soft: 0
        hard: 0
    healthcheck:
      start_period: 30s
    environment:
      # Service Hosts
      <<: [
        *redis-client-env,
        *postgresdb-client-env,
        # Environment
        *deployment-env,
        # Build API
        *build-api-env,
      ]

  build_service:
    image: placeos/build_service:nightly
    restart: always
    hostname: build_service
    depends_on:
      - minio
      - testbucket
    environment:
      <<: *s3-client-env

  minio:
    image: minio/minio:latest
    volumes:
      - s3:/data
    ports:
      - 9000:9000
      - 9090:9090
    environment:
      << : *s3-client-env
      MINIO_ROOT_USER: $AWS_KEY
      MINIO_ROOT_PASSWORD: $AWS_SECRET
    command: server /data --console-address ":9090"

  testbucket:
    image: minio/mc:latest
    depends_on:
      - minio
    environment:
      << : *s3-client-env
    entrypoint: >
      sh -c '
      sleep 3 &&
      mc config host add s3 $AWS_S3_ENDPOINT $AWS_KEY $AWS_SECRET &&
      mc mb -p s3/$AWS_S3_BUCKET &&
      exit 0
      '
volumes:
  s3: